// #################################################################################################
// Stern-Gerlach Tutorials
// Copyright (C) 2015-2016 Georgetown University
// Department of Physics - Washington, DC, USA
// Written by Lucas Vieira (https://github.com/1ucasvb)
//
// -------------------------------------- LICENSE --------------------------------------------------
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
//
// #################################################################################################
// 
// Tutorial 1.01: Introduction to the the Stern-Gerlach apparatus with current loops
//
// #################################################################################################


// #################################################################################################
// Setup application

// Create an SGE Application with given name and dimensions
var app = SGE.createApp("SGEApplication", 820, 600);

// Add its container to the document body
$("body").append(app.div);

// Creates a Viewport3D component and adds it to the app
var viewport = new SGE.Viewport3D(800, 400);
app.add(viewport, 10, 10);

// Add some lights
// Two opposing lights are good for creating volume highlights
viewport.addLight(-50, 80, 200, 0x010101*200);
viewport.addLight(50, -80, -200, 0x010101*200);

// Create a message box for instructions and add it
var messagebox = new SGE.MessageBox(600, 170);
app.add(messagebox, 10, 420);

var btNext = new SGE.Button(190, 80, "NEXT", 0x6699FF);
app.add(btNext, messagebox.x + messagebox.width + 10, messagebox.y); 

var btGo = new SGE.Button(190, 80, "GO", 0x22CC88);
btGo.enabled = false;
app.add(btGo, messagebox.x + messagebox.width + 10, messagebox.y + 90); 

// var btBlank = new SGE.Button(190, 50, "BLANK", 0xCCCCCC);
// btBlank.enabled = false;
// app.add(btBlank, messagebox.x + messagebox.width + 10, messagebox.y + 120); 

// #################################################################################################
// Tutorial constants

// All messages for this tutorial in one place, for ease of editing
var MESSAGES = {
	'intro': [
		"<strong>Introduction</strong>",
		"Welcome to the first interactive tutorial on the Stern-Gerlach experiment!",
		"In this tutorial we'll explore how loops of current, and the magnetic arrows associated with them, behave under the influence of a magnetic field that is not uniform.",
		"To continue, press "+btNext.textVersion
	],
	
	// Part 1
	'1-0': [
		"<strong>Part 1: Source of particles and current loops</strong>",
		"Above, we have a viewport to our simulated experiment. There's nothing in the experiment yet, so the viewport is empty.",
		"Let's start by adding a source of particles. Press "+btNext.textVersion+" to add it to the experiment."
	],
	'1-1': [
		"This is our source of particles.",
		"The drawings on the sides of the source tell us that the particles will behave like current loops.",
		"The magnetic arrow of the loops coming out of this source will point upwards, relative to the source.",
		"Let's give it a try. Press "+btGo.textVersion+" to have the source release some of these current loops."
	],
	'1-2': [
		"We can now see how the source releases current loops. The small positive charge spinning around in a circle generates a magnetic moment, shown as a red and blue arrow.",
		"Notice how the direction of the arrow relates to the direction in which the <em>positive</em> charge spins around the loop. The loop is also always perpendicular to the magnetic arrow. We curl the fingers of our right hand in the orientation of the current-loop arrow, and our thumb points in the direction of the north pole of the effective magnet generated by the current loop (red part of arrow).",
		"Now let's see what happens if we rotate the source. Press "+btNext.textVersion+" to start the rotation."
	],
	'1-3': [
		"As you can see, the magnetic arrows point upwards relative to the source. This direction is easy to see by following the drawings on the sides of the source.",
		"Now that you know how this type or source works, let's see what we can do with these current loops.",
		"Press "+btNext.textVersion+" to continue."
	],
	
	// Part 2
	'2-0': [
		"<strong>Part 2: The Stern-Gerlach experiment for current loops</strong>",
		"We'll now introduce a new element to our experiment, and see how it affects current loops.",
		"Press "+btNext.textVersion+" to continue."
	],
	'2-1': [
		"First, we bring a pair of two permanent magnets with special shapes and place them in front of the source. The two magnets have their south and north poles facing each other.",
		"The bottom magnet is just a flat magnet with its north pole pointing upwards, so we color it red to emphasize this.",
		"The top magnet, however, has a sharp edge pointing down where its south pole is. We emphasize this by coloring it blue.",
		"Since the south pole is on a sharp edge, the magnetic field lines will be stronger near this pole. The magnetic field between these two magnets will <em><strong>not</strong></em> be uniform.",
		"You can see this by noticing how the magnetic field lines, in purple, are closer together near the tip of the blue magnet, at the top. We represent this by a fat arrow pointing up and fatter on the top than at the bottom (not shown).",
		"Press "+btNext.textVersion+" to continue."
	],
	'2-2': [
		"We want to see how this non-uniform magnetic field affects the current loops coming from the source.",
		"To do this, we'll also add a screen on the opposite side of the magnets, on the right. This way, any loop hitting the screen will leave a mark, and by studying the position of the marks we can find out how the magnets affected the trajectory of the loops.",
		"We are ready to begin our experiment!",
		"From what we've seen in the course, what do you expect to happen in the experiment, given the current setup? Think about it for a minute before you proceed. Recall what causes the current loop to precess and what causes it to have a force on it.",
		"Once you are ready, press "+btGo.textVersion+" to begin."
	],
	'2-3': [
		"The magnetic arrow of the loop interacts with the magnetic field. Since the magnetic field is not uniform, there's a net force acting on the loop, which pushes it upwards.",
		"The result is that the magnets deflect this loop upwards, and they hit the screen near the top.",
		"What if we flip the source upside-down? Make a prediction before proceeding.",
		"Press "+btNext.textVersion+" to find out."
	],
	'2-4': [
		"The net force acting on the loop is now downwards, so the loop is deflected in the opposite direction as before, hitting the screen near the bottom. This is the opposite of what happened earlier, which is expected.",
		"But what happens if the source is at a different angle, not exactly aligned with the magnetic field between the magnets?",
		"Let's assume it is at a 90° angle relative to the direction of the magnetic field. What will happen? Go back to what we have seen in the course and make your prediction.",
		"Once you are ready, press "+btNext.textVersion+" to see if you got it right."
	],
	'2-5': [
		"In this case, the loop is not deflected at all! Instead, the magnetic arrow rotates in place around the direction of the magnetic field!",
		"This phenomenon, called <em>precession</em>, occurs because the magnetic arrow is intrinsically connected to the angular momentum of the charge rotating around the loop.",
		"The orientation of the magnetic arrow determines the strength and direction of the interaction with the magnetic field. In addition, since this is a current loop, it precesses in the magnetic field instead of oscillating, as we saw with the bicycle wheel and gyroscope demonstrations.",
		"Let's take a closer look at how this precession occurs. We'll also change the angle to 60° so we can see an intermediate case.",
		"Press "+btNext.textVersion+" to continue."
	],
	'2-6': [
		"We're now taking a closer look at the magnetic arrow as it precesses. Everything is happening in slow motion so we can see the details of the precession.",
		"The vertical line going through the arrow indicates the direction of the magnetic field. As you can see, the magnetic arrow of the current loop spins around this axis, tracing out a cone in space (the tip of the arrow traces a circle), also visible.",
		"At any moment during this rotation, the projection of the magnetic arrow on the vertical magnetic field axis stays the same. Therefore, the force acting on the loop will also be the same.",
		"This means the amount of deflection in the path of the loop is directly related to the angle between the magnetic field and the magnetic arrow generated by the loop of current. In other words, by knowing where the loop hits the screen we can figure out several possible directions for the magnetic arrow associated with the loop, all lying on the same cone, as shown.", 
		"This implies that the Stern-Gerlach experiment acts like a microscope, allowing us to measure the projection of the effective arrow of the current loop on the magnetic field by measuring the magnitude of the deflection on the screen.", 
		"Press "+btNext.textVersion+" to continue."
	],
	'2-7': [
		"We have now seen how the angle of the magnetic arrow is associated with a position on the screen.",
		"To further explore this idea, let us throw hundreds of loops towards the screen at different angles and see what pattern we obtain.",
		"Press "+btGo.textVersion+" to continue."
	],
	'2-8': [
		"We see that, for the current loop, we get a continuous distribution of points if we consider all possible orientations of the loop's magnetic arrow relative to the magnetic field between the magnets.",
		"All of these results are what we expect from classical physics. However, as we'll see next, things become even more interesting and curious when we attempt to extend this idea to quantum mechanical particles.",
		"This concludes this tutorial. Please, proceed to the next section of the course."
	]
}

// #################################################################################################
// Tutorial steps

// Experiment elements

// Experiment
var experiment = new SGE.Experiment();

// Source
var source = experiment.source;
source.sourceType = SGE.SOURCE_TYPE_CURRENT_LOOP;

// Camera
var camera = viewport.camera;
camera.focusOn(SGE.ORIGIN);
camera.x = 4.8;
camera.y = 2;
camera.z = 3;

// Custom "ignore" target
var ignore = new SGE.Ignore();

// Stern-Gerlach apparatus
var sterngerlach = new SGE.SternGerlach();

// #################################################################################################
// Tutorial narrative (encapsulates steps and other things)
var tutorial = {};
tutorial.animate = null; // custom animation callback

// -------------------------------------------------------------------------------------------------
// Introduction
tutorial.intro = function() {
	// ------------- Current step
	messagebox.setMessage(MESSAGES['intro'], false);
	btNext.blinkOn();
	
	// ------------- For next step
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part1.intro);
	btNext.enabled = true;
}

// -------------------------------------------------------------------------------------------------
// Part 1 - Source of particles and current loops
tutorial.part1 = {};

// Show empty viewport, ask to add source
tutorial.part1.intro = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	btNext.blinkOff();
	// ------------- Current step
	messagebox.setMessage(MESSAGES['1-0'], true);
	viewport.blinkOn();
	
	// ------------- For next step
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part1.step1);
	btNext.enabled = true;
}

// Add source, ask to press go
tutorial.part1.step1 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	viewport.blinkOff();
	// ------------- Current step
	messagebox.setMessage(MESSAGES['1-1'], true);
	
	// Add experiment
	viewport.addExperiment(experiment);
	
	// Add source and tween it into place
	experiment.position.y = 4;
	
	source.label.size = 1/3;
	source.label.text = "SOURCE OF\nCURRENT LOOPS";
	source.label.position.y = 1.25;
	source.label.color = 0xFFFFFF;
	source.label.visible = true;
	source.label.opacity = 0;
	
	TweenMax.to(experiment.position, 2, {
		y: 0,
		ease: Power4.easeInOut,
		onComplete: function() {
			TweenMax.to(source.label, 1, {
				opacity: 1
			});
		}
	});
	
	// Spin camera around source slowly
	tutorial.animate = function(t, delta) {
		camera.theta += delta*0.5;
	}
	
	// ------------- For next step
	btGo.enabled = true;
	btGo.blinkOn();
	btGo.events.on(SGE.EVENT_PRESS, tutorial.part1.step2);
}

// Go pressed, keep firing particles
tutorial.part1.step2 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btGo.events.off(SGE.EVENT_PRESS);
	btGo.enabled = false;
	btGo.blinkOff();
	experiment.position.y = 0;
	tutorial.animate = null;
	
	TweenMax.to(camera, 1, {
		theta: SGE.TAU/4,
		ease: Power4.easeInOut
	});
	
	TweenMax.to(source.label, 0.5, {
		opacity: 0,
		onComplete: function() {
			source.label.visible = false;
		}
	});
	// ------------- Current step
	messagebox.setMessage(MESSAGES['1-2'], true);
	
	// Add an invisible ignore object ahead of source
	// This prevents an ("x ignore") icon showing up automatically near the source
	// By manully adding one in front of the source off screen, we force the particle to move
	// all the way to the right
	ignore.spacing = 12;
	source.attach(ignore, SGE.IO_RIGHT);
	experiment.updatePositions();
	
	experiment.events.on(SGE.EVENT_END_EXPERIMENT, function(){
		// Run experiment again and again after 1 second wait
		setTimeout(function(){
			experiment.run();
		},1000);
	});
	
	// Set speed to a slightly faster speed
	experiment.atomSpeed = 2;
	
	// Move camera so we get a nice view of the current loop traveling
	TweenMax.to(camera, 1, {
		delay: 1,
		x: 4.8,
		ease: Power4.easeInOut,
		onStart: function() { camera.focusOn(null); },
		onComplete: function() {
			experiment.run();
		}
	});
	
	
	// ------------- For next step
	btNext.enabled = true;
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part1.step3);
}

// Change angle continuously
tutorial.part1.step3 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	experiment.events.off(SGE.EVENT_END_EXPERIMENT);
	experiment.end();
	// ------------- Current step
	messagebox.setMessage(MESSAGES['1-3'], true);
	
	// Show angle meter
	source.angleMeter.visible = true;
	source.angleMeter.opacity = 0;
	TweenMax.to(source.angleMeter, 1, { opacity: 1 });
	
	TweenMax.to(source, 1, {
		angle: source.angle + SGE.TAU/360*30,
		ease: Power4.easeInOut,
		onComplete: function() { experiment.run(); }
	});
	
	experiment.events.on(SGE.EVENT_END_EXPERIMENT, function(){
		// Run experiment again and again after 1 second wait
		// Rotate source by 10° each times
		TweenMax.to(source, 1, {
			angle: source.angle + SGE.TAU/360*30,
			ease: Power4.easeInOut,
			onComplete: function(){ experiment.run(); }
		});
	});
	
	// ------------- For next step
	btNext.enabled = true;
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part2.intro);
}

// -------------------------------------------------------------------------------------------------
// Part 2 - The Stern-Gerlach experiment for current loops
tutorial.part2 = {};

// Intro, add Stern-Gerlach experiment (magnets only)
tutorial.part2.intro = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	experiment.events.off(SGE.EVENT_END_EXPERIMENT);
	experiment.end();
	TweenMax.to(source.angleMeter, 1, {
		opacity: 0,
		onComplete: function() { source.angleMeter.visible = false; }
	});
	
	// Remove ignore object
	ignore.detach();
	experiment.remove(ignore);
	// ------------- Current step
	messagebox.setMessage(MESSAGES['2-0'], true);
	
	// save camera position for later
	tutorial.cameraPos = { 
		x: camera.x,
		y: camera.y,
		z: camera.z
	};
	
	TweenMax.to(source, 1, {
		angle: 0,
		ease: Power4.easeInOut
	});
	
	// ------------- For next step
	btNext.enabled = true;
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part2.step1);
}

// Add Stern-Gerlach experiment
tutorial.part2.step1 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	experiment.end();
	// ------------- Current step
	messagebox.setMessage(MESSAGES['2-1'], true);
	
	// Setup Stern-Gerlach apparatus
	sterngerlach.spacing = 1;
	source.attach(sterngerlach, SGE.IO_RIGHT);
	sterngerlach.magnets.southMagnet.position.y = 4;
	sterngerlach.magnets.northMagnet.position.y = -4;
	sterngerlach.screen.visible = false;
	
	// Move in magnets
	TweenMax.to(sterngerlach.magnets.southMagnet.position, 1, {
		y: 0, ease: Power4.easeOut
	});
	TweenMax.to(sterngerlach.magnets.northMagnet.position, 1, {
		y: 0, ease: Power4.easeOut
	});
	
	// Show magnets in close-up
	camera.focusOn(new THREE.Vector3(camera.x,0,0));
	TweenMax.to(camera, 1, {
		rho: 2,
		theta: 0.9,
		delay: 0.5,
		ease: Power2.easeInOut
	});
	
	// Reveal magnetic field lines
	TweenMax.to(sterngerlach.magnets, 0.5, {
		fieldOpacity: 1,
		delay: 1.5,
		ease: Power2.easeInOut
	});
	
	
	// ------------- For next step
	btNext.enabled = true;
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part2.step2);
}

// Add screen
tutorial.part2.step2 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	sterngerlach.magnets.southMagnet.position.y = 0;
	sterngerlach.magnets.northMagnet.position.y = 0;
	// ------------- Current step
	messagebox.setMessage(MESSAGES['2-2'], true);
	
	// Restore camera position
	TweenMax.to(camera, 1, {
		x: tutorial.cameraPos.x,
		y: tutorial.cameraPos.y,
		z: tutorial.cameraPos.z,
		ease: Power2.easeInOut
	});
	camera.moveFocusTo(new THREE.Vector3(tutorial.cameraPos.x,0,0), 1);
	
	// Hide magnetic field lines
	TweenMax.to(sterngerlach.magnets, 0.5, {
		fieldOpacity: 0,
		ease: Power2.easeInOut
	});
	
	// Move in screen
	sterngerlach.screen.position.x = 5;
	sterngerlach.screen.visible = true;
	TweenMax.to(sterngerlach.screen.position, 1, {
		x: 0,
		delay: 1,
		ease: Power4.easeOut
	});
	
	// ------------- For next step
	btGo.enabled = true;
	btGo.blinkOn();
	btGo.events.on(SGE.EVENT_PRESS, tutorial.part2.step3);
}

// Fire particles to the screen
tutorial.part2.step3 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btGo.events.off(SGE.EVENT_PRESS);
	btGo.enabled = false;
	btGo.blinkOff();
	sterngerlach.screen.position.x = 0;
	// ------------- Current step
	messagebox.setMessage(MESSAGES['2-3'], true);
	
	experiment.events.on(SGE.EVENT_END_EXPERIMENT,function(){
		// Wait for at least one particle
		btNext.enabled = true;
		btNext.blinkOn();
		// Continually fire particles
		clearTimeout(tutorial.timer);
		tutorial.timer = setTimeout(function(){
			experiment.run();
		}, 1000);
	});
	experiment.run();
	
	// ------------- For next step
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part2.step4);
}

// Rotate 180°
tutorial.part2.step4 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	btNext.blinkOff();
	clearTimeout(tutorial.timer);
	experiment.events.off(SGE.EVENT_END_EXPERIMENT);
	experiment.end();
	// ------------- Current step
	messagebox.setMessage(MESSAGES['2-4'], true);
	
	source.angleMeter.visible = true;
	TweenMax.to(source.angleMeter, 0.5, {
		opacity: 1
	});
	TweenMax.to(source, 1, {
		delay: 0.5,
		angle: SGE.TAU/2,
		ease: Power4.easeInOut,
		onComplete: function() { experiment.run(); }
	});
	experiment.events.on(SGE.EVENT_END_EXPERIMENT,function(){
		// Wait for at least one particle
		btNext.enabled = true;
		btNext.blinkOn();
		// Continually fire particles
		clearTimeout(tutorial.timer);
		tutorial.timer = setTimeout(function(){
			experiment.run();
		}, 1000);
	});
	
	// ------------- For next step
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part2.step5);
}

// Rotate 90°
tutorial.part2.step5 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	btNext.blinkOff();
	clearTimeout(tutorial.timer);
	experiment.events.off(SGE.EVENT_END_EXPERIMENT);
	experiment.end();
	// ------------- Current step
	messagebox.setMessage(MESSAGES['2-5'], true);
	
	TweenMax.to(source, 1, {
		angle: SGE.TAU/4,
		ease: Power4.easeInOut,
		onComplete: function() { experiment.run(); }
	});
	experiment.events.on(SGE.EVENT_END_EXPERIMENT,function(){
		// Continually fire particles
		btNext.enabled = true;
		btNext.blinkOn();
		clearTimeout(tutorial.timer);
		tutorial.timer = setTimeout(function(){
			experiment.run();
		}, 1000);
	});
	
	// ------------- For next step
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part2.step6);
}

// Rotate to 60°
tutorial.part2.step6 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	btNext.blinkOff();
	clearTimeout(tutorial.timer);
	experiment.events.off(SGE.EVENT_END_EXPERIMENT);
	experiment.end();
	// ------------- Current step
	messagebox.setMessage(MESSAGES['2-6'], true);
	
	SGE.AnimationManager.timeFactor = 1/4;
	
	var focus = new THREE.Vector3(4.8,0,0);
	camera.focusOn(focus);
	
	TweenMax.to(source.angleMeter, 0.5, { opacity: 0 });
	
	TweenMax.to(source, 1, {
		angle: -SGE.TAU/6,
		ease: Power4.easeInOut,
		onComplete: function() {
			TweenMax.to(focus, 1, {
				x: sterngerlach.position.x + sterngerlach.magnets.position.x,
				ease: Power2.easeInOut,
			});
			TweenMax.to(camera, 2, {
				x: sterngerlach.position.x + sterngerlach.magnets.position.x - 1.5,
				y: sterngerlach.position.y + sterngerlach.magnets.position.y + 0.75,
				z: sterngerlach.position.z + sterngerlach.magnets.position.z + 3,
				ease: Power2.easeInOut,
				onComplete: function() {
					experiment.run();
				}
			});
		}
	});
	
	sterngerlach.events.on(SGE.EVENT_MOVE_INSIDE, function(e){
		if (e.distance > 0) SGE.AnimationManager.timeFactor += e.distance/50;
	});
		
	experiment.events.on(SGE.EVENT_END_EXPERIMENT,function(){
		// Continually fire particles
		btNext.enabled = true;
		btNext.blinkOn();
		SGE.AnimationManager.timeFactor = 1/4;
		clearTimeout(tutorial.timer);
		tutorial.timer = setTimeout(function(){
			experiment.run();
		}, 100);
	});
	
	// ------------- For next step
	btNext.events.on(SGE.EVENT_PRESS, tutorial.part2.step7);
}

// Rotate continuously
tutorial.part2.step7 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	btNext.blinkOff();
	SGE.AnimationManager.timeFactor = 1;
	experiment.events.off(SGE.EVENT_END_EXPERIMENT);
	sterngerlach.events.off(SGE.EVENT_MOVE_INSIDE);
	experiment.end();
	sterngerlach.clearScreen();
	clearTimeout(tutorial.timer);
	// ------------- Current step
	messagebox.setMessage(MESSAGES['2-7'], true);
	
	TweenMax.to(source, 1, {
		angle: 0,
		ease: Power4.easeInOut
	});
	
	TweenMax.to(source.angleMeter, 1, {
		opacity: 1,
		ease: Power4.easeInOut
	});
	
	// TweenMax.to(camera, 1, {
		// x: 4.8,
		// y: 2,
		// z: 5,
		// ease: Power2.easeInOut
	// });
	
	// Restore camera position
	TweenMax.to(camera, 1, {
		x: tutorial.cameraPos.x,
		y: tutorial.cameraPos.y,
		z: tutorial.cameraPos.z,
		ease: Power2.easeInOut
	});
	camera.moveFocusTo(new THREE.Vector3(tutorial.cameraPos.x,0,0), 1);
	
	btGo.enabled = true;
	btGo.blinkOn();
	btGo.events.on(SGE.EVENT_PRESS,function(e){
		btGo.events.off(SGE.EVENT_PRESS);
		btGo.enabled = false;
		btGo.blinkOff();
		experiment.run();
	});
	
	var count = 36*4;
	experiment.events.on(SGE.EVENT_END_EXPERIMENT,function(){
		count--;
		if (count >= 0) {
			SGE.AnimationManager.timeFactor *= 1.25;
			source.angle += SGE.TAU/36,
			clearTimeout(tutorial.timer);
			tutorial.timer = setTimeout(function(){
				experiment.run();
			}, 50);
			return;
		}
		// Go to next step automatically
		tutorial.part2.step8();
	});
	
	// ------------- For next step
	// Automatic
}

// Conclusion
tutorial.part2.step8 = function() {
	// ------------- Clean up previous step
	TweenMax.killAll(true);
	btNext.events.off(SGE.EVENT_PRESS);
	btNext.enabled = false;
	experiment.events.off(SGE.EVENT_END_EXPERIMENT);
	experiment.end();
	clearTimeout(tutorial.timer);
	// ------------- Current step
	messagebox.setMessage(MESSAGES['2-8'], true);
	
	TweenMax.to(sterngerlach.magnets.position, 1, {
		x: 0,
		y: -2,
		z: 0,
		ease: Power2.easeInOut
	});
	
	TweenMax.to(camera, 1, {
		x: 4,
		y: 1.5,
		z: 0,
		ease: Power2.easeInOut
	});
	
	var pos = sterngerlach.position.clone();
	pos.x += sterngerlach.length/2;
	camera.moveFocusTo(pos, 1);
	// TweenMax.to(camera.focusOnVector, 1, {  // ToDo: broken
		// x: sterngerlach.position.x + sterngerlach.length/2,
		// y: 0,
		// z: 0,
		// ease: Power2.easeInOut
	// });
	
	// Done
}

// -------------------------------------------------------------------------------------------------
// Animation handler

function animate(t, delta) {
	if (tutorial.animate) tutorial.animate(t, delta);
	experiment.updatePositions();
	viewport.render();
}
SGE.startAnimation(animate);

// Start tutorial
tutorial.intro();
